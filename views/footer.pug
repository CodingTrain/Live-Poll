head
    link(rel="stylesheet" href="/css/footer.css")
    
div(id="footer")
  h3 View options &nbsp;
   a(style="font-size: 0.7em" onclick="this.parentNode.parentNode.remove()")
      i [close]

  div#options-wrapper
    div
      input(type="checkbox" id="font-toggle")
      label(for="font-toggle") Use simplier font
    div
      input(type="checkbox" id="gradient-toggle")
      label(for="gradient-toggle") monotone gradient
    div  
      input(type="checkbox" id="overlay-toggle")
      label(for="overlay-toggle") toggle overlay mode

  script.

    // checkboxes
    const fontToggle = document.querySelector('#font-toggle');
    const gradientToggle = document.querySelector('#gradient-toggle');
    const overlayToggle = document.querySelector('#overlay-toggle');
    
    // first check url-parameters
    // extracts url-styling parameters from poll.pug
    const styling = document.querySelector('[data-styling]').dataset.styling;
    const urlStyling = (JSON.parse(styling));
    let transparency = null;

    // check if any url-parameter was submitted (if not)
    if(Object.keys(urlStyling).length === 0) {

      // initial state from localStorage
      fontToggle.checked = localStorage.getItem('font-simple') == 'true';
      gradientToggle.checked = localStorage.getItem('no-gradient') == 'true';
      overlayToggle.checked = localStorage.getItem('overlay-on') == 'true';

    } else {

      // removes local storage if url-parameters are used
      localStorage.removeItem('font-simple');
      localStorage.removeItem('no-gradient');
      localStorage.removeItem('overlay-on');

      // set states from url-paramaters
      fontToggle.checked = urlStyling.simple == 'true';
      gradientToggle.checked = urlStyling.monotone == 'true';

      // because we need a value between 0 - 100 boolean are converted
      if(urlStyling.transparent == 'true' || urlStyling.transparent == 'false') {
        urlStyling.transparent = (urlStyling.transparent == 'true') ? 100 : 0;
      }

      // transparency of 0% means the element is fully visible
      // and therefore overlayToggle.checked will be undefined (disabled)
      overlayToggle.checked = urlStyling.transparent != 0 ? 'true' : undefined;
      transparency = urlStyling.transparent;
    }

    changeFonts(fontToggle.checked);
    changeGradient(gradientToggle.checked);
    changeOverlay(overlayToggle.checked, transparency);

    // input handlers
    fontToggle.oninput = function() {
      localStorage.setItem('font-simple', fontToggle.checked);
      changeFonts(fontToggle.checked);
    };

    gradientToggle.oninput = function() {
      localStorage.setItem('no-gradient', gradientToggle.checked);
      changeGradient(gradientToggle.checked);
    };

    overlayToggle.oninput = function() {
      localStorage.setItem('overlay-on', overlayToggle.checked);
      changeOverlay(overlayToggle.checked);
    };

    // toggle font by switching the variable in css
    function changeFonts(simple) {
      if (simple)
      document.documentElement.style.setProperty('--codingtrain-fontface', 'Open Sans');
      else
      document.documentElement.style.setProperty('--codingtrain-fontface', 'cubanoregular');
    }


    // remove gradient by removing or adding the correct class to the progress bar
    function changeGradient(off) {
      if (off)  {
        let elements = document.getElementsByClassName('progressBar');
        for (let element of elements) {
          element.classList.remove('gradient')
        }
      } else {
        let elements = document.getElementsByClassName('progressBar');
        for (let element of elements) {
          element.classList.add('gradient')
        }
      }
    }

    // toggle the overlay
    // default value is a transparency = 50
    function changeOverlay(overlay, transparency = 50) {
      if (overlay)
        //set the background to semi-transperant white
        document.body.style.background = `rgba(255, 255, 255, ${(100 - transparency) / 100})`;
      else
        //set the background to white
        document.body.style.background = `rgba(255, 255, 255, 1)`;
    }
